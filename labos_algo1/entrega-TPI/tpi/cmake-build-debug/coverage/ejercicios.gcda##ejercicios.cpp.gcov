        -:    0:Source:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/ejercicios.cpp
        -:    0:Graph:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/ejercicios.gcno
        -:    0:Data:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:#include "auxiliares.h"
        -:    4:
        -:    5:// Ejercicios
        -:    6:
        7:    7:bool esSenial(vector<int> const& s, int prof, int freq) {
        7:    7-block  0
        7:    8:    bool resp = esValida(s, prof, freq);
        7:    8-block  0
        7:    9:    return resp;
        -:   10:}
        -:   11:
        2:   12:bool seEnojo(senial const& s, int umbral, int prof, int freq) {
        2:   12-block  0
        2:   13:    bool resp = false;
       52:   14:    for(int i = 0; i < s.size(); i++) {
        2:   14-block  0
       52:   14-block  1
       50:   14-block  2
      700:   15:        for(int j = i+1; j <= s.size(); j++) {
       50:   15-block  0
      700:   15-block  1
     1300:   16:            senial subsecuencia = subsec(s, i, j);
      650:   16-block  0
      650:   16-block  1
    %%%%%:   16-block  2
      679:   17:            resp = resp || (duracion(subsecuencia, freq, 2) &&
      650:   17-block  0
      371:   17-block  1
      371:   17-block  2
       29:   17-block  3
      280:   17-block  4
      370:   17-block  5
       29:   18:                    superaUmbral(subsecuencia, umbral));
       29:   18-block  0
        -:   19:        }
        -:   20:    }
        2:   21:    return resp;
        2:   21-block  0
        2:   21-block  1
        -:   22:}
        -:   23:
        4:   24:bool esReunionValida(reunion const& r, int prof, int freq) {
        4:   24-block  0
       11:   25:    bool resp = (r.size() > 0) && esMatriz(r) &&
        4:   25-block  0
        4:   25-block  1
       11:   26:            senialesValidas(r, prof, freq) && hablantesDeReunionesValidas(r, prof, freq);
        3:   26-block  0
        2:   26-block  1
        1:   26-block  2
        3:   26-block  3
        4:   27:    return resp;
        4:   27-block  0
        -:   28:}
        -:   29:
        2:   30:void acelerar(reunion& r, int prof, int freq) {
        2:   30-block  0
        4:   31:    for(int i = 0; i < r.size(); i++){
        2:   31-block  0
        4:   31-block  1
        2:   32:        r[i].first = acelerarSenial(r[i].first);
        2:   32-block  0
        2:   32-block  1
    %%%%%:   32-block  2
        -:   33:    }
        2:   34:}
        2:   34-block  0
        -:   35:
        3:   36:void ralentizar(reunion& r, int prof, int freq) {
        3:   36-block  0
        7:   37:    for(int i = 0; i < r.size(); i++) {
        3:   37-block  0
        7:   37-block  1
        4:   38:        r[i].first = senialInterpolada(r[i].first);
        4:   38-block  0
        4:   38-block  1
    %%%%%:   38-block  2
        -:   39:    }
        3:   40:}
        3:   40-block  0
        -:   41:
        3:   42:vector<hablante> tonosDeVozElevados(reunion const& r, int freq, int prof) {
        3:   42-block  0
        3:   43:    vector<hablante> maximos;
        3:   43-block  0
        6:   44:    vector<int> maxi = tonoMaximo(r);
        3:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
       10:   45:    for(int i = 0; i < r.size(); i++) {
        3:   45-block  0
       10:   45-block  1
        7:   45-block  2
        7:   46:        if (tono(maxi) == tono(r[i].first)) {
        7:   46-block  0
        7:   46-block  1
        7:   46-block  2
        5:   47:            maximos.push_back(r[i].second);
        5:   47-block  0
        5:   47-block  1
        -:   48:        }
        -:   49:    }
        6:   50:    return maximos;
        3:   50-block  0
        3:   50-block  1
        -:   51:}
        -:   52:
        2:   53:void ordenar(reunion& r, int freq, int prof) {
        2:   53-block  0
        8:   54:    for(int i=0; i < r.size(); i++) {
        2:   54-block  0
        8:   54-block  1
        6:   55:        int maxPos = encontrarMaxiPosi(r, i, r.size());
        6:   55-block  0
       12:   56:        pair<senial , hablante> aux = r[i];
        6:   56-block  0
        6:   56-block  1
    %%%%%:   56-block  2
        6:   57:        r[i] = r[maxPos];
        6:   57-block  0
        6:   58:        r[maxPos] = aux;
        6:   58-block  0
        -:   59:    }
        2:   60:    return;
        2:   60-block  0
        2:   60-block  1
        -:   61:}
        -:   62:
        3:   63:vector<pair<int,int> > silencios(senial const& s, int prof, int freq, int umbral) {
        3:   63-block  0
        3:   64:    vector<pair<int,int> > intervalos;
        3:   64-block  0
        6:   65:    vector<int> indices;
        3:   65-block  0
    %%%%%:   65-block  1
    %%%%%:   65-block  2
        3:   66:    pair<int, int> parIndices;
       49:   67:    for(int i=0; i < s.size(); i++) {
       49:   67-block  0
       46:   67-block  1
       46:   68:        if (abs(s[i]) < umbral) {
       46:   68-block  0
       26:   69:            indices.push_back(i);
       26:   69-block  0
       26:   70:            if (i == (s.size() - 1)) {
       26:   70-block  0
        2:   71:                parIndices = make_pair(indices[0], indices[(indices.size() - 1)]);
        2:   71-block  0
        2:   71-block  1
        2:   72:                intervalos.push_back(parIndices);
        2:   72-block  0
        -:   73:            }
        -:   74:        } else {
       20:   75:            if ( duraMasDe0_1(indices, freq) ) {
       20:   75-block  0
       20:   75-block  1
        2:   76:                parIndices = make_pair(indices[0], indices[(indices.size() - 1)]);
        2:   76-block  0
        2:   76-block  1
        2:   77:                intervalos.push_back(parIndices);
        2:   78:                indices = vector<int>();
        2:   78-block  0
        -:   79:            } else {
       18:   80:                indices = vector<int>();
       18:   80-block  0
        -:   81:            }
        -:   82:        }
        -:   83:    }
        6:   84:    return intervalos;
        3:   84-block  0
        3:   84-block  1
    %%%%%:   84-block  2
        -:   85:}
        -:   86:
        2:   87:bool hablantesSuperpuestos(reunion const& r, int prof, int freq, int umbral) {
        2:   87-block  0
        2:   88:    bool resp = true;
        8:   89:    for(int i=0; i<r.size(); i++){
        2:   89-block  0
        8:   89-block  1
        6:   89-block  2
       24:   90:        for(int j=0; j<r.size(); j++){
        6:   90-block  0
       24:   90-block  1
       18:   90-block  2
       18:   91:            if (i != j){
       18:   91-block  0
       12:   92:                resp = resp && seSuperponen(r[i].first, r[j].first, umbral);
       12:   92-block  0
        2:   92-block  1
        2:   92-block  2
        2:   92-block  3
        2:   92-block  4
    $$$$$:   92-block  5
       12:   92-block  6
       12:   92-block  7
        2:   92-block  8
       12:   92-block  9
        2:   92-block 10
       12:   92-block 11
    %%%%%:   92-block 12
    %%%%%:   92-block 13
    %%%%%:   92-block 14
    %%%%%:   92-block 15
    %%%%%:   92-block 16
    %%%%%:   92-block 17
    %%%%%:   92-block 18
        -:   93:            }
        -:   94:        }
        -:   95:    }
        2:   96:}
        2:   96-block  0
        -:   97:
        4:   98:senial reconstruir(senial const& s, int prof, int freq) {
        4:   98-block  0
        4:   99:    senial senalReconstruida;
        4:   99-block  0
        4:  100:    int i = 0;
       55:  101:    while(i<s.size()) {
       55:  101-block  0
       51:  101-block  1
       51:  102:        if ((s[i] == 0) && not( ((s[i+1]<0) && (s[i-1]>0)) || ((s[i+1]>0) && (s[i-1]<0)) )) {
       51:  102-block  0
       12:  102-block  1
        9:  102-block  2
        9:  102-block  3
        1:  102-block  4
        9:  102-block  5
       42:  102-block  6
       51:  102-block  7
        9:  103:            int l = i;
        9:  103-block  0
       12:  104:            while (s[i + 1] == 0) {
       12:  104-block  0
        3:  104-block  1
        3:  105:                i += 1;
        -:  106:            }
        9:  107:            int promedio = (s[l-1] + s[i+1])/2;
        9:  107-block  0
        9:  108:            if ( (s[l-1]<0 && s[i+1]<0) || (s[l-1]>0 && s[i+1]>0) ){
        6:  108-block  0
        3:  108-block  1
        3:  108-block  2
        8:  108-block  3
        1:  108-block  4
        9:  108-block  5
       18:  109:                for(int k=l; k <= i; k++){
        8:  109-block  0
       18:  109-block  1
       10:  109-block  2
       10:  110:                    senalReconstruida.push_back(promedio);
       10:  110-block  0
        -:  111:                }
        8:  112:                i += 1;
        8:  112-block  0
        -:  113:            } else {
        3:  114:                for (int k = l; k <= i; k++) {
        1:  114-block  0
        3:  114-block  1
        2:  114-block  2
        2:  115:                    senalReconstruida.push_back(s[i]);
        2:  115-block  0
        -:  116:                }
        9:  117:                i += 1;
        1:  117-block  0
        9:  117-block  1
        -:  118:            }
        -:  119:        } else {
       42:  120:            senalReconstruida.push_back(s[i]);
       42:  120-block  0
       42:  121:            i += 1;
       42:  121-block  0
        -:  122:        }
        -:  123:    }
        4:  124:    return senalReconstruida;
        4:  124-block  0
        4:  124-block  1
    %%%%%:  124-block  2
    %%%%%:  124-block  3
        -:  125:}
        -:  126:
        2:  127:void filtradoMediana(senial& s, int r, int prof, int freq){
        2:  127-block  0
        2:  128:    int b = (2*r);
        4:  129:    vector<int> v1 = s;
        2:  129-block  0
        2:  129-block  1
    %%%%%:  129-block  2
       10:  130:    for(int i = 0; b < s.size(); i++){
        2:  130-block  0
       10:  130-block  1
        8:  131:        int valorMediana = ordenarYmediana(i, b, s);
        8:  131-block  0
        8:  131-block  1
        8:  131-block  2
    %%%%%:  131-block  3
    %%%%%:  131-block  4
        8:  132:        v1[(b-r)] = valorMediana;
        8:  133:        b = b + 1;
        -:  134:    }
        2:  135:    s = v1;
        2:  135-block  0
        4:  136:    return;
        2:  136-block  0
        2:  136-block  1
        -:  137:}
        -:  138:
        -:  139:
