        -:    0:Source:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/auxiliares.cpp
        -:    0:Graph:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/auxiliares.gcno
        -:    0:Data:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "definiciones.h"
        -:    2:#include "auxiliares.h"
        -:    3:
        -:    4:// aqui se pueden ubicar todas las funciones auxiliares de soporte para la resolucion de los ejercicios
        -:    5:
        -:    6:// Ejercicio 1:
        -:    7:
       14:    8:bool elRango(vector<int> const& s, int prof) {
       14:    8-block  0
       14:    9:    bool rango = true;
       14:   10:    int bajo = (pow(-2,(prof - 1 )) );
       14:   10-block  0
       14:   11:    int alto = ((pow(2,(prof - 1 )) - 1 ) );
      225:   12:    for (int i=0; i < s.size(); i++) {
      225:   12-block  0
      211:   12-block  1
      211:   13:        rango = rango && ( ( s[i] >= bajo ) && ( s[i] <= alto ) );
      211:   13-block  0
      179:   13-block  1
      179:   13-block  2
      177:   13-block  3
       34:   13-block  4
        -:   14:    }
       14:   15:    return rango;
       14:   15-block  0
        -:   16:}
        -:   17:
      385:   18:bool duracion(vector<int> const& s, int freq, int seg) {
      385:   18-block  0
      385:   19:    return (s.size() >= (freq * seg));
      385:   19-block  0
        -:   20:}
        -:   21:
       14:   22:bool esValida(vector<int> const& s, int prof, int freq) {
       14:   22-block  0
       14:   23:    bool freqValida = (freq == 10);
       14:   24:    bool enRango = elRango(s, prof);
       14:   24-block  0
       14:   25:    bool profValida = (prof == 8) || (prof == 16) || (prof == 32);
        2:   25-block  0
        2:   25-block  1
       13:   25-block  2
        1:   25-block  3
       14:   26:    bool laDuracion = duracion(s, freq, 1);
       14:   26-block  0
       14:   27:    bool valida = freqValida && enRango && profValida && laDuracion;
       13:   27-block  0
       11:   27-block  1
       11:   27-block  2
        9:   27-block  3
        5:   27-block  4
       14:   28:    return valida;
       14:   28-block  0
        -:   29:}
        -:   30:
        -:   31:// Ejercicio 2:
        -:   32:
       69:   33:int tono(senial const& s) {
       69:   33-block  0
       69:   34:    int m = 0;
     1500:   35:    for(int i = 0; i < s.size(); i++) {
       69:   35-block  0
     1500:   35-block  1
     1431:   36:        m = m + abs(s[i]);
     1431:   36-block  0
        -:   37:    }
       69:   38:    m = m / s.size();
       69:   38-block  0
       69:   39:    return m ;
        -:   40:}
        -:   41:
       29:   42:bool superaUmbral(senial const& s, int umbral) {
       29:   42-block  0
       29:   43:    return (tono(s) > umbral);
       29:   43-block  0
        -:   44:}
        -:   45:
      650:   46:senial subsec(senial const& s, int a, int b) {
      650:   46-block  0
      650:   47:    senial res;
      650:   47-block  0
     6500:   48:    for (int i=a; (i<b) && (i<s.size()); i++) {
     6500:   48-block  0
     5850:   48-block  1
     5850:   48-block  2
      650:   48-block  3
     6500:   48-block  4
     5850:   48-block  5
     5850:   49:        res.push_back(s[i]);
     5850:   49-block  0
        -:   50:    }
      650:   51:    return res;
      650:   51-block  0
      650:   51-block  1
    %%%%%:   51-block  2
        -:   52:}
        -:   53:
        -:   54:// Ejercicio 3:
        -:   55:
        4:   56:bool esMatriz(reunion const& r) {
        4:   56-block  0
        4:   57:    bool res = true;
       16:   58:    for(int i = 0; i < r.size(); i++) {
        4:   58-block  0
       16:   58-block  1
       12:   58-block  2
       12:   59:        res = res && ((((r[i]).first).size()) == (((r[0]).first).size()));
       12:   59-block  0
       12:   59-block  1
       11:   59-block  2
        1:   59-block  3
        -:   60:    }
        4:   61:    return res;
        4:   61-block  0
        -:   62:}
        -:   63:
        3:   64:bool senialesValidas(reunion const& r, int prof, int freq) {
        3:   64-block  0
        3:   65:    bool valida = true;
       12:   66:    for(int i = 0; i < r.size(); i++) {
        3:   66-block  0
       12:   66-block  1
        9:   66-block  2
        9:   67:        valida = valida && esValida((r[i].first), prof, freq);
        9:   67-block  0
        7:   67-block  1
        6:   67-block  2
        3:   67-block  3
        -:   68:    }
        3:   69:    return valida;
        3:   69-block  0
        -:   70:}
        -:   71:
        2:   72:bool hablantesDeReunionesValidas(reunion const& r, int prof, int freq) {
        2:   72-block  0
        2:   73:    bool res = true;
        2:   74:    int len = r.size();
        2:   74-block  0
        8:   75:    for(int i = 0; i < len; i++) {
        8:   75-block  0
        6:   75-block  1
       24:   76:        for(int j = 0; j < len; j++) {
        6:   76-block  0
       24:   76-block  1
       18:   76-block  2
       54:   77:            if ( (((r[i]).second) >= len) || ((r[i].first != r[j].first) && (r[i].second == r[j].second))
       18:   77-block  0
       18:   77-block  1
       10:   77-block  2
       18:   77-block  3
       36:   78:            || ((r[i].first == r[j].first) && (r[i].second != r[j].second)) ) {
       18:   78-block  0
        8:   78-block  1
        2:   78-block  2
       16:   78-block  3
        2:   79:                res = false;
        2:   79-block  0
        -:   80:            }
        -:   81:        }
        -:   82:    }
        2:   83:    return res;
        2:   83-block  0
        -:   84:}
        -:   85:
        -:   86:// Ejercicio 4:
        -:   87:
        2:   88:vector<int> acelerarSenial(vector<int> s) {
        2:   88-block  0
        2:   89:    vector<int> s0;
        2:   89-block  0
       51:   90:    for(int i = 0; i < s.size(); i++){
       51:   90-block  0
       49:   90-block  1
       49:   91:        if (i % 2 == 1) {
       49:   91-block  0
       24:   92:            s0.push_back(s[i]);
       24:   92-block  0
       24:   92-block  1
        -:   93:        }
        -:   94:    }
        2:   95:    return s0;
        2:   95-block  0
        2:   95-block  1
    %%%%%:   95-block  2
        -:   96:}
        -:   97:
        -:   98:// Ejercicio 5:
        -:   99:
        4:  100:vector<int> senialInterpolada(vector<int> s) {
        4:  100-block  0
        4:  101:    vector<int> s0;
        4:  101-block  0
       41:  102:    for(int i = 0; i < s.size()-1; i++){
       41:  102-block  0
       37:  102-block  1
       37:  103:        int prom = (s[i] + s[i+1]) / 2;
       37:  103-block  0
       37:  104:        s0.push_back(s[i]);
       37:  105:        s0.push_back(prom);
       37:  105-block  0
        -:  106:    }
        4:  107:    s0.push_back(s[s.size()-1]);
        4:  107-block  0
        4:  108:    return s0;
        4:  108-block  0
        4:  108-block  1
    %%%%%:  108-block  2
    %%%%%:  108-block  3
        -:  109:}
        -:  110:
        -:  111:// Ejercicios 6:
        -:  112:
        3:  113:vector<int> tonoMaximo(reunion const& r) {
        3:  113-block  0
        3:  114:    vector<int> maxi = r[0].first;
        3:  114-block  0
       10:  115:    for(int i = 0; i < r.size(); i++) {
       10:  115-block  0
        7:  115-block  1
        7:  116:        if (tono(r[i].first) >= tono(maxi)) {
        7:  116-block  0
        7:  117:            maxi = r[i].first;
        7:  117-block  0
        7:  117-block  1
        -:  118:        }
        -:  119:    }
        3:  120:    return maxi;
        3:  120-block  0
        3:  120-block  1
    %%%%%:  120-block  2
        -:  121:}
        -:  122:
        -:  123:// Ejercicio 7:
        -:  124:
        6:  125:int encontrarMaxiPosi(reunion& r, int d, int h) {
        6:  125-block  0
        6:  126:    int maxi = d;
       12:  127:    for(int i = d+1; i < h; i++) {
        6:  127-block  0
       12:  127-block  1
        6:  127-block  2
        6:  128:        if (tono(r[i].first) > tono(r[maxi].first)) {
        6:  128-block  0
        4:  129:            maxi = i;
        4:  129-block  0
        -:  130:        }
        -:  131:    }
        6:  132:    return maxi;
        6:  132-block  0
        -:  133:}
        -:  134:
        -:  135://Ejercicio 8:
        -:  136:
       20:  137:bool duraMasDe0_1(vector<int> const& s, int freq) {
       20:  137-block  0
       20:  138:    return (s.size() > (freq * 0.1));
       20:  138-block  0
        -:  139:}
        -:  140:
        -:  141:// Ejercicio 9:
        -:  142:
        2:  143:bool seSuperponen( senial uno, senial dos, int umbral){
        2:  143-block  0
        2:  144:    bool noSuperpuestos = true;
       24:  145:    for(int k = 0; k < uno.size(); k++){
        2:  145-block  0
       24:  145-block  1
       22:  145-block  2
       22:  146:        if (k == 0){
       22:  146-block  0
        4:  147:            noSuperpuestos = noSuperpuestos && ( ( (uno[k] >= umbral) && ( (dos[k] < umbral)
        2:  147-block  0
        2:  147-block  1
    $$$$$:  147-block  2
    $$$$$:  147-block  3
        2:  147-block  4
        2:  147-block  5
        2:  148:                    && (dos[(k+1)] < umbral))) || (((uno[k] < umbral) && (uno[(k+1)] < umbral)))
    $$$$$:  148-block  0
        2:  148-block  1
        2:  148-block  2
        1:  149:                            && (dos[k] >= umbral) );
        1:  149-block  0
        -:  150:        } else {
       20:  151:            if (k == uno.size() - 1) {
       20:  151-block  0
        2:  152:                noSuperpuestos = noSuperpuestos && ( ( (uno[k] >= umbral) && ( (dos[k] < umbral)
        2:  152-block  0
    $$$$$:  152-block  1
    $$$$$:  152-block  2
    $$$$$:  152-block  3
        2:  152-block  4
        2:  152-block  5
    #####:  153:                        && (dos[k-1] < umbral))) || ( ( (uno[k] < umbral) && (uno[k-1] < umbral) )
    $$$$$:  153-block  0
    $$$$$:  153-block  1
    $$$$$:  153-block  2
    #####:  154:                                && (dos[k] >= umbral) ) );
    $$$$$:  154-block  0
        -:  155:            } else {
       18:  156:                noSuperpuestos = noSuperpuestos && ( ( (uno[k] >= umbral) && ( (dos[k] < umbral)
       18:  156-block  0
    $$$$$:  156-block  1
    $$$$$:  156-block  2
    $$$$$:  156-block  3
       18:  156-block  4
       18:  156-block  5
    #####:  157:                        && ( (dos[(k+1)] < umbral) || (dos[k-1] < umbral) ))) ||  ( ( (uno[k] < umbral)
    $$$$$:  157-block  0
    $$$$$:  157-block  1
    $$$$$:  157-block  2
    #####:  158:                                && ( (uno[(k+1)] < umbral) || (uno[k-1] < umbral) ) ) && (dos[k] >= umbral) ) );
    $$$$$:  158-block  0
    $$$$$:  158-block  1
    $$$$$:  158-block  2
        -:  159:            }
        -:  160:        }
        -:  161:    }
        2:  162:    return noSuperpuestos;
        2:  162-block  0
        -:  163:}
        -:  164:
        -:  165:// Ejercicio 11:
        -:  166:
       48:  167:int findMinPosi(vector<int> s, int d, int h) {
       48:  167-block  0
       48:  168:    int min = d;
      180:  169:    for(int i=d+1; i <= h; i++) {
       48:  169-block  0
      180:  169-block  1
      132:  169-block  2
      132:  170:        if (s[i] < s[min]) {
      132:  170-block  0
       42:  171:            min = i;
       42:  171-block  0
        -:  172:        }
        -:  173:    }
       48:  174:    return min;
       48:  174-block  0
        -:  175:}
        -:  176:
        8:  177:int ordenarYmediana(int inicial, int final, vector<int> s) {
        8:  177-block  0
       56:  178:    for (int i = inicial; i <= final; i++) {
        8:  178-block  0
       56:  178-block  1
       48:  179:        int minPosi = findMinPosi(s, i, final);
       48:  179-block  0
       48:  180:        int auxiliar = s[i];
       48:  181:        s[i] = s[minPosi];
       48:  182:        s[minPosi] = auxiliar;
        -:  183:    }
        8:  184:    int indiceMediana = (final-inicial)/2 + inicial;
        8:  185:    return s[indiceMediana];
        8:  185-block  0
        -:  186:}
