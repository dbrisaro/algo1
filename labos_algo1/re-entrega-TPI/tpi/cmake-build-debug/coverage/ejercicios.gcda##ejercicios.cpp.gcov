        -:    0:Source:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/ejercicios.cpp
        -:    0:Graph:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/ejercicios.gcno
        -:    0:Data:/home/eph3m3r4l/Desktop/TPI-algoritmos/tpi-template-alumnos/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:#include "auxiliares.h"
        -:    4:
        -:    5:// Ejercicios
        -:    6:
        7:    7:bool esSenial(vector<int> const& s, int prof, int freq) {
        7:    7-block  0
        7:    8:    bool resp = esValida(s, prof, freq);
        7:    8-block  0
        7:    9:    return resp;
        -:   10:}
        -:   11:
        4:   12:bool seEnojo(senial const& s, int umbral, int prof, int freq) {
        4:   12-block  0
        4:   13:    bool resp = false;
      104:   14:    for(int i = 0; i < s.size(); i++) {
        4:   14-block  0
      104:   14-block  1
      100:   14-block  2
     1325:   15:        for(int j = i+1; j < s.size(); j++) {
      100:   15-block  0
     1325:   15-block  1
     2450:   16:            senial subsecuencia = subsec(s, i, j);
     1225:   16-block  0
     1225:   16-block  1
    %%%%%:   16-block  2
     1248:   17:            resp = resp || (duracion(subsecuencia, freq, 2) &&
     1225:   17-block  0
      555:   17-block  1
      555:   17-block  2
       23:   17-block  3
      672:   17-block  4
      553:   17-block  5
       23:   18:                    superaUmbral(subsecuencia, umbral));
       23:   18-block  0
        -:   19:        }
        -:   20:    }
        4:   21:    return resp;
        4:   21-block  0
        4:   21-block  1
        -:   22:}
        -:   23:
        4:   24:bool esReunionValida(reunion const& r, int prof, int freq) {
        4:   24-block  0
       11:   25:    bool resp = (r.size() > 0) && esMatriz(r) &&
        4:   25-block  0
        4:   25-block  1
       11:   26:            senialesValidas(r, prof, freq) && hablantesDeReunionesValidas(r, prof, freq);
        3:   26-block  0
        2:   26-block  1
        2:   26-block  2
        2:   26-block  3
        4:   27:    return resp;
        4:   27-block  0
        -:   28:}
        -:   29:
        2:   30:void acelerar(reunion& r, int prof, int freq) {
        2:   30-block  0
        4:   31:    for(int i = 0; i < r.size(); i++){
        2:   31-block  0
        4:   31-block  1
        2:   32:        r[i].first = acelerarSenial(r[i].first);
        2:   32-block  0
        2:   32-block  1
    %%%%%:   32-block  2
        -:   33:    }
        2:   34:}
        2:   34-block  0
        -:   35:
        3:   36:void ralentizar(reunion& r, int prof, int freq) {
        3:   36-block  0
        7:   37:    for(int i = 0; i < r.size(); i++) {
        3:   37-block  0
        7:   37-block  1
        4:   38:        r[i].first = senialInterpolada(r[i].first);
        4:   38-block  0
        4:   38-block  1
    %%%%%:   38-block  2
        -:   39:    }
        3:   40:}
        3:   40-block  0
        -:   41:
        3:   42:vector<hablante> tonosDeVozElevados(reunion const& r, int freq, int prof) {
        3:   42-block  0
        3:   43:    vector<hablante> maximos;
        3:   43-block  0
        6:   44:    vector<int> maxi = tonoMaximo(r);
        3:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
       10:   45:    for(int i = 0; i < r.size(); i++) {
        3:   45-block  0
       10:   45-block  1
        7:   45-block  2
        7:   46:        if (tono(maxi) == tono(r[i].first)) {
        7:   46-block  0
        7:   46-block  1
        7:   46-block  2
        5:   47:            maximos.push_back(r[i].second);
        5:   47-block  0
        5:   47-block  1
        -:   48:        }
        -:   49:    }
        6:   50:    return maximos;
        3:   50-block  0
        3:   50-block  1
        -:   51:}
        -:   52:
        2:   53:void ordenar(reunion& r, int freq, int prof) {
        2:   53-block  0
        8:   54:    for(int i=0; i < r.size(); i++) {
        2:   54-block  0
        8:   54-block  1
        6:   55:        int maxPos = encontrarMaxiPosi(r, i, r.size());
        6:   55-block  0
       12:   56:        pair<senial , hablante> aux = r[i];
        6:   56-block  0
        6:   56-block  1
    %%%%%:   56-block  2
        6:   57:        r[i] = r[maxPos];
        6:   57-block  0
        6:   58:        r[maxPos] = aux;
        6:   58-block  0
        -:   59:    }
        2:   60:    return;
        2:   60-block  0
        2:   60-block  1
        -:   61:}
        -:   62:
        3:   63:vector<pair<int,int> > silencios(senial const& s, int prof, int freq, int umbral) {
        3:   63-block  0
        3:   64:    vector<pair<int,int> > intervalos;
        3:   64-block  0
        6:   65:    vector<int> indices;
        3:   65-block  0
    %%%%%:   65-block  1
    %%%%%:   65-block  2
        3:   66:    pair<int, int> parIndices;
       49:   67:    for(int i=0; i < s.size(); i++) {
       49:   67-block  0
       46:   67-block  1
       46:   68:        if (abs(s[i]) < umbral) {
       46:   68-block  0
       26:   69:            indices.push_back(i);
       26:   69-block  0
       26:   70:            if (i == (s.size() - 1)) {
       26:   70-block  0
        2:   71:                parIndices = make_pair(indices[0], indices[(indices.size() - 1)]);
        2:   71-block  0
        2:   71-block  1
        2:   72:                intervalos.push_back(parIndices);
        2:   72-block  0
        -:   73:            }
        -:   74:        } else {
       20:   75:            if ( duraMasDe0_1(indices, freq) ) {
       20:   75-block  0
       20:   75-block  1
        2:   76:                parIndices = make_pair(indices[0], indices[(indices.size() - 1)]);
        2:   76-block  0
        2:   76-block  1
        2:   77:                intervalos.push_back(parIndices);
        2:   78:                indices = vector<int>();
        2:   78-block  0
        -:   79:            } else {
       18:   80:                indices = vector<int>();
       18:   80-block  0
        -:   81:            }
        -:   82:        }
        -:   83:    }
        6:   84:    return intervalos;
        3:   84-block  0
        3:   84-block  1
    %%%%%:   84-block  2
        -:   85:}
        -:   86:
        3:   87:bool hablantesSuperpuestos(reunion const& r, int prof, int freq, int umbral) {
        3:   87-block  0
        3:   88:    bool resp = false;
        3:   89:    int len = r.size();
        3:   89-block  0
       10:   90:    for(int i=0; i<len; i++){
       10:   90-block  0
        7:   90-block  1
       26:   91:        for(int j=0; j<len; j++){
        7:   91-block  0
       26:   91-block  1
       19:   91-block  2
       19:   92:            if (i != j){
       19:   92-block  0
       12:   93:                resp = resp || not(noSeSuperponen(r[i].first, r[j].first, umbral));
       12:   93-block  0
        7:   93-block  1
        7:   93-block  2
        7:   93-block  3
        7:   93-block  4
        6:   93-block  5
        6:   93-block  6
       12:   93-block  7
        7:   93-block  8
       12:   93-block  9
        7:   93-block 10
       12:   93-block 11
    %%%%%:   93-block 12
    %%%%%:   93-block 13
    %%%%%:   93-block 14
    %%%%%:   93-block 15
    %%%%%:   93-block 16
    %%%%%:   93-block 17
    %%%%%:   93-block 18
        -:   94:            }
        -:   95:        }
        -:   96:    }
        3:   97:    return resp;
        3:   97-block  0
        3:   97-block  1
        -:   98:}
        -:   99:
        4:  100:senial reconstruir(senial const& s, int prof, int freq) {
        4:  100-block  0
        4:  101:    senial senalReconstruida;
        4:  101-block  0
        4:  102:    int i = 0;
       51:  103:    while(i<s.size()) {
       51:  103-block  0
       47:  103-block  1
       47:  104:        if ((s[i] == 0) && not( ((s[i+1]<0) && (s[i-1]>0)) || ((s[i+1]>0) && (s[i-1]<0)) )) {
       47:  104-block  0
       10:  104-block  1
        7:  104-block  2
        8:  104-block  3
        1:  104-block  4
        8:  104-block  5
       39:  104-block  6
       47:  104-block  7
        8:  105:            int l = i;
        8:  105-block  0
       11:  106:            while (s[i + 1] == 0) {
       11:  106-block  0
        3:  106-block  1
        3:  107:                i += 1;
        -:  108:            }
        8:  109:            int promedio = (s[l-1] + s[i+1])/2;
        8:  109-block  0
       19:  110:            for(int k=l; k <= i; k++){
       19:  110-block  0
       11:  110-block  1
       11:  111:                senalReconstruida.push_back(promedio);
       11:  111-block  0
        -:  112:            }
        8:  113:            i += 1;
        8:  113-block  0
        -:  114:        } else {
       39:  115:            senalReconstruida.push_back(s[i]);
       39:  115-block  0
       39:  116:            i += 1;
       39:  116-block  0
        -:  117:        }
        -:  118:    }
        4:  119:    return senalReconstruida;
        4:  119-block  0
        4:  119-block  1
    %%%%%:  119-block  2
    %%%%%:  119-block  3
        -:  120:}
        -:  121:
        2:  122:void filtradoMediana(senial& s, int r, int prof, int freq){
        2:  122-block  0
        2:  123:    int b = (2*r);
        4:  124:    vector<int> v1 = s;
        2:  124-block  0
        2:  124-block  1
    %%%%%:  124-block  2
       10:  125:    for(int i = 0; b < s.size(); i++){
        2:  125-block  0
       10:  125-block  1
        8:  126:        int valorMediana = ordenarYmediana(i, b, s);
        8:  126-block  0
        8:  126-block  1
        8:  126-block  2
    %%%%%:  126-block  3
    %%%%%:  126-block  4
        8:  127:        v1[(b-r)] = valorMediana;
        8:  128:        b = b + 1;
        -:  129:    }
        2:  130:    s = v1;
        2:  130-block  0
        4:  131:    return;
        2:  131-block  0
        2:  131-block  1
        -:  132:}
        -:  133:
        -:  134:
